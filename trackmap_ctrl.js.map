{"version":3,"sources":["../src/trackmap_ctrl.js"],"names":["log","msg","console","L","moment","appEvents","MetricsPanelCtrl","TrackMapCtrl","$scope","$injector","_","defaults","panel","maxDataPoints","autoZoom","scrollWheelZoom","defaultLayer","showLayerChanger","lineColor","pointColor","maxDataPointDelta","layers","tileLayer","attribution","maxZoom","forcedOverlay","subdomains","timeSrv","get","coords","leafMap","layerChanger","polylines","hoverMarker","hoverTarget","setSizePromise","events","on","onInitialized","bind","onViewModeChanged","onInitEditMode","onPanelTeardown","onPanelSizeChanged","onDataReceived","onDataSnapshotLoad","onRender","onPanelHover","onPanelClear","dashboard","LegacyGraphHoverEvent","type","LegacyGraphHoverClearEvent","eachLayer","l","GridLayer","isLoading","once","renderingCompleted","render","addEditorTab","$timeout","cancel","evt","length","target","Math","floor","pos","x","addTo","min","max","idx","exact","timestamp","setLatLng","position","removeFrom","map","invalidateSize","enabled","disable","enable","hadMap","Boolean","setupMap","layer","removeControl","addControl","addDataToMap","forEach","polyline","id","zoomSnap","zoomDelta","control","circleMarker","latLng","color","fillColor","fillOpacity","weight","radius","mapBaseLayerChange","mapZoomToBox","e","overlay","options","setZIndex","zIndex","bounds","reduce","t","c","boxZoomBounds","contains","from","to","Infinity","isFinite","setTime","utc","coord","index","prevTimestamp","push","zoomToFit","getBounds","i","extend","isValid","fitBounds","setView","setStyle","data","lats","datapoints","lons","snapshotData","templateUrl"],"mappings":"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","sourcesContent":["import L from './leaflet/leaflet.js';\nimport moment from 'moment';\n\nimport appEvents from 'app/core/app_events';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport './leaflet/leaflet.css!';\nimport './partials/module.css!';\n\n\nfunction log(msg) {\n  // uncomment for debugging\n  console.log(msg);\n}\n\nexport class TrackMapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    log(\"constructor\");\n\n    _.defaults(this.panel, {\n      maxDataPoints: 500,\n      autoZoom: true,\n      scrollWheelZoom: false,\n      defaultLayer: 'Satellite',\n      showLayerChanger: true,\n      lineColor: 'red',\n      pointColor: 'royalblue',\n      maxDataPointDelta: 60,\n    });\n\n    // Save layers globally in order to use them in options\n    this.layers = {\n      'OpenStreetMap': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19\n      }),\n      'OpenTopoMap': L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        maxZoom: 17\n      }),\n      'Satellite': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Imagery &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n        // This map doesn't have labels so we force a label-only layer on top of it\n        forcedOverlay: L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {\n          attribution: 'Labels by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n          subdomains: 'abcd',\n          maxZoom: 20,\n        })\n      })\n    };\n\n    this.timeSrv = $injector.get('timeSrv');\n    this.coords = [];\n    this.leafMap = null;\n    this.layerChanger = null;\n    this.polylines = [];\n    this.hoverMarker = null;\n    this.hoverTarget = null;\n    this.setSizePromise = null;\n\n    // Panel events\n    this.events.on('panel-initialized', this.onInitialized.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n\n    // Global events\n    appEvents.on('graph-hover', this.onPanelHover.bind(this));\n    appEvents.on('graph-hover-clear', this.onPanelClear.bind(this));\n    \n    // Global events\n    this.dashboard.events.on(LegacyGraphHoverEvent.type, this.onPanelHover.bind(this), $scope);\n    this.dashboard.events.on(LegacyGraphHoverClearEvent.type, this.onPanelClear.bind(this), $scope);\n  }\n\n  onRender(){\n    log(\"onRender\")\n    // Wait until there is at least one GridLayer with fully loaded\n    // tiles before calling renderingCompleted\n    if (this.leafMap) {\n      this.leafMap.eachLayer((l) => {\n        if (l instanceof L.GridLayer){\n          if (l.isLoading()) {\n            l.once('load', this.renderingCompleted.bind(this));\n          }\n          else {\n            this.renderingCompleted();\n          }\n        }\n      });\n    }\n  }\n\n  onInitialized(){\n    log(\"onInitialized\");\n    this.render();\n  }\n\n  onInitEditMode() {\n    log(\"onInitEditMode\");\n    this.addEditorTab('Options', 'public/plugins/tecsat-trackmap-panel/partials/options.html', 2);\n  }\n\n  onPanelTeardown() {\n    log(\"onPanelTeardown\");\n    this.$timeout.cancel(this.setSizePromise);\n  }\n\n  onPanelHover(evt) {\n    log(\"onPanelHover\");\n    log(this.coords)\n    if (this.coords.length === 0) {\n      return;\n    }\n\n    // check if we are already showing the correct hoverMarker\n    let target = Math.floor(evt.pos.x);\n    if (this.hoverTarget && this.hoverTarget === target) {\n      return;\n    }\n\n    // check for initial show of the marker\n    if (this.hoverTarget == null){\n      this.hoverMarker.addTo(this.leafMap);\n    }\n\n    this.hoverTarget = target;\n\n    // Find the currently selected time and move the hoverMarker to it\n    // Note that an exact match isn't always going to work due to rounding so\n    // we clean that up later (still more efficient)\n    let min = 0;\n    let max = this.coords.length - 1;\n    let idx = null;\n    let exact = false;\n    while (min <= max) {\n      idx = Math.floor((max + min) / 2);\n      if (this.coords[idx].timestamp === this.hoverTarget) {\n        exact = true;\n        break;\n      }\n      else if (this.coords[idx].timestamp < this.hoverTarget) {\n        min = idx + 1;\n      }\n      else {\n        max = idx - 1;\n      }\n    }\n\n    // Correct the case where we are +1 index off\n    if (!exact && idx > 0 && this.coords[idx].timestamp > this.hoverTarget) {\n      idx--;\n    }\n    this.hoverMarker.setLatLng(this.coords[idx].position);\n    this.render();\n  }\n\n  onPanelClear(evt) {\n    log(\"onPanelClear\");\n    // clear the highlighted circle\n    this.hoverTarget = null;\n    if (this.hoverMarker) {\n      this.hoverMarker.removeFrom(this.leafMap);\n    }\n  }\n\n  onViewModeChanged(){\n    log(\"onViewModeChanged\");\n    // KLUDGE: When the view mode is changed, panel resize events are not\n    //         emitted even if the panel was resized. Work around this by telling\n    //         the panel it's been resized whenever the view mode changes.\n    this.onPanelSizeChanged();\n  }\n\n  onPanelSizeChanged() {\n    log(\"onPanelSizeChanged\");\n    // KLUDGE: This event is fired too soon - we need to delay doing the actual\n    //         size invalidation until after the panel has actually been resized.\n    this.$timeout.cancel(this.setSizePromise);\n    let map = this.leafMap;\n    this.setSizePromise = this.$timeout(function(){\n      if (map) {\n        log(\"Invalidating map size\");\n        map.invalidateSize(true);\n      }}, 500\n    );\n  }\n\n  applyScrollZoom() {\n    let enabled = this.leafMap.scrollWheelZoom.enabled();\n    if (enabled != this.panel.scrollWheelZoom){\n      if (enabled){\n        this.leafMap.scrollWheelZoom.disable();\n      }\n      else{\n        this.leafMap.scrollWheelZoom.enable();\n      }\n    }\n  }\n\n  applyDefaultLayer() {\n    let hadMap = Boolean(this.leafMap);\n    this.setupMap();\n    if (hadMap){\n      // Re-add the default layer\n      this.leafMap.eachLayer((layer) => {\n        layer.removeFrom(this.leafMap);\n      });\n      this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n      // Hide/show the layer switcher\n      this.leafMap.removeControl(this.layerChanger)\n      if (this.panel.showLayerChanger){\n        this.leafMap.addControl(this.layerChanger);\n      }\n    }\n    this.addDataToMap();\n  }\n\n  setupMap() {\n    log(\"setupMap\");\n    // Create the map or get it back in a clean state if it already exists\n    if (this.leafMap) {\n      if (this.polylines.length > 0){\n        this.polylines.forEach(polyline => polyline.removeFrom(this.leafMap));\n        this.polylines = [];\n      }\n      this.onPanelClear();\n      return;\n    }\n\n    // Create the map\n    this.leafMap = L.map('trackmap-' + this.panel.id, {\n      scrollWheelZoom: this.panel.scrollWheelZoom,\n      zoomSnap: 0.5,\n      zoomDelta: 1,\n    });\n\n    // Create the layer changer\n    this.layerChanger = L.control.layers(this.layers)\n\n    // Add layers to the control widget\n    if (this.panel.showLayerChanger){\n      this.leafMap.addControl(this.layerChanger);\n    }\n\n    // Add default layer to map\n    this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n    // Hover marker\n    this.hoverMarker = L.circleMarker(L.latLng(0, 0), {\n      color: 'white',\n      fillColor: this.panel.pointColor,\n      fillOpacity: 1,\n      weight: 2,\n      radius: 7\n    });\n\n    // Events\n    this.leafMap.on('baselayerchange', this.mapBaseLayerChange.bind(this));\n    this.leafMap.on('boxzoomend', this.mapZoomToBox.bind(this));\n  }\n\n  mapBaseLayerChange(e) {\n    // If a tileLayer has a 'forcedOverlay' attribute, always enable/disable it\n    // along with the layer\n    if (this.leafMap.forcedOverlay) {\n      this.leafMap.forcedOverlay.removeFrom(this.leafMap);\n      this.leafMap.forcedOverlay = null;\n    }\n    let overlay = e.layer.options.forcedOverlay;\n    if (overlay) {\n      overlay.addTo(this.leafMap);\n      overlay.setZIndex(e.layer.options.zIndex + 1);\n      this.leafMap.forcedOverlay = overlay;\n    }\n  }\n\n  mapZoomToBox(e) {\n    log(\"mapZoomToBox\");\n    // Find time bounds of selected coordinates\n    const bounds = this.coords.reduce(\n      function(t, c) {\n        if (e.boxZoomBounds.contains(c.position)) {\n          t.from = Math.min(t.from, c.timestamp);\n          t.to = Math.max(t.to, c.timestamp);\n        }\n        return t;\n      },\n      {from: Infinity, to: -Infinity}\n    );\n\n    // Set the global time range\n    if (isFinite(bounds.from) && isFinite(bounds.to)) {\n      // KLUDGE: Create moment objects here to avoid a TypeError that\n      //         occurs when Grafana processes normal numbers\n      this.timeSrv.setTime({\n        from: moment.utc(bounds.from),\n        to: moment.utc(bounds.to)\n      });\n    }\n    this.render();\n  }\n\n  // Add the circles and polyline to the map\n  addDataToMap() {\n    const coords = [[]];\n\n    this.coords.forEach((coord, index) => {\n      if (index !== 0 && this.panel.maxDataPointDelta !== 0){\n        const prevTimestamp = this.coords[index - 1].timestamp;\n\n        if (coord.timestamp - prevTimestamp > this.panel.maxDataPointDelta * 60000){\n          coords.push([]); // Start a new polyline\n        }\n      }\n\n      coords[coords.length - 1].push(coord.position);\n    });\n\n    log(\"addDataToMap\");\n\n    coords.forEach(polyline => {\n      this.polylines.push(L.polyline(polyline, {\n        color: this.panel.lineColor,\n        weight: 3,\n      }).addTo(this.leafMap));\n    });\n\n    this.zoomToFit();\n  }\n\n  zoomToFit(){\n    log(\"zoomToFit\");\n    if (this.panel.autoZoom && this.polylines.length > 0){\n      var bounds = this.polylines[0].getBounds();\n\n      for (var i = 1; i < this.polylines.length; i++){\n        bounds = bounds.extend(this.polylines[i].getBounds());\n      }\n\n      if (bounds.isValid()){\n        this.leafMap.fitBounds(bounds);\n      }\n      else {\n        this.leafMap.setView([0, 0], 1);\n      }\n    }\n    this.render();\n  }\n\n  refreshPolylines() {\n    this.setupMap();\n    this.addDataToMap();\n  }\n\n  refreshColors() {\n    log(\"refreshColors\");\n    this.polylines.forEach(polyline => {\n      polyline.setStyle({ color: this.panel.lineColor });\n    });\n    if (this.hoverMarker){\n      this.hoverMarker.setStyle({\n        fillColor: this.panel.pointColor,\n      });\n    }\n    this.render();\n  }\n\n  onDataReceived(data) {\n    log(\"onDataReceived\");\n    this.setupMap();\n\n    if (data.length === 0 || data.length !== 2) {\n      // No data or incorrect data, show a world map and abort\n      this.leafMap.setView([0, 0], 1);\n      this.render();\n      return;\n    }\n\n    // Asumption is that there are an equal number of properly matched timestamps\n    // TODO: proper joining by timestamp?\n    this.coords.length = 0;\n    const lats = data[0].datapoints;\n    const lons = data[1].datapoints;\n    for (let i = 0; i < lats.length; i++) {\n      if (lats[i][0] == null || lons[i][0] == null ||\n          lats[i][1] !== lons[i][1]) {\n        continue;\n      }\n\n      this.coords.push({\n        position: L.latLng(lats[i][0], lons[i][0]),\n        timestamp: lats[i][1]\n      });\n    }\n    this.addDataToMap();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    log(\"onSnapshotLoad\");\n    this.onDataReceived(snapshotData);\n  }\n}\n\nTrackMapCtrl.templateUrl = 'partials/module.html';"],"file":"trackmap_ctrl.js"}